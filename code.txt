### SERVER.R

library(googleVis)
library(plyr)
library(shiny)

load("colon.R")

# Exclude records with unknown CSSize values.
preprocessedData = subset(colon, cssize < 999)

# Convert reg to google recognized names.
preprocessedData$reg = revalue(preprocessedData$reg, c("aG" = "Georgia",
                       "AK" = "Alaska",
                       "CA" = "California",
                       "CT" = "Connecticut",
                       "dM" = "Iowa",
                       "GA" = "Georgia",
                       "HI" = "Hawaii",
                       "IA" = "Iowa",
                       "KY" = "Kentucky",
                       "la" = "California",
                       "LA" = "California",
                       "NJ" = "New Jersey",
                       "NM" = "New Mexico",
                       "rG" = "Georgia",
                       "sf" = "California",
                       "sj" = "California",
                       "sW" = "Washington",
                       "UT" = "Utah"))

shinyServer(function(input, output) {
  
  output$googleBarChart = renderGvis({
    # Make sure the input strings actually have values in them.
    if (is.character(input$graphX) && is.character(input$graphY) && is.character(input$aggregateFunction)) {
      # Concatenate strings to make an aggregation formula.
      formula = as.formula(paste(input$graphY, " ~ ", input$graphX))
      # Aggregate the data.
      dataAggregate = aggregate(formula, preprocessedData, input$aggregateFunction)
      # Display the data.
      gvisColumnChart(dataAggregate, input$graphX, input$graphY,
                      options = list(title = paste(input$graphX, " VS ", input$graphY)))
    }
  })

  output$googlePieChart = renderGvis({
    # Check for strings
    if (is.character(input$pieVar)) {
      # Count instances of the variable
      dataCount = count(preprocessedData, vars = input$pieVar)
      # Convert numeric data to strings to make gVis happy
      dataCount[,c(input$pieVar)] = as.character(dataCount[,c(input$pieVar)])
      # Manually specifying pie chart height for readability
      gvisPieChart(dataCount, labelvar = input$pieVar, numvar = "freq",
                   options = list(height = 500))
    }
  })

  output$googleMotionChart = renderGvis({
    # Check for strings
    if (is.character(input$motionX) && is.character(input$motionY) && is.character(input$motionSize) && is.character(input$motionTime) && is.character(input$motionID)) {
      # Formula for selecting multiple variables, taking the mean of some
      formula = as.formula(paste("cbind(", input$motionSize, ", ", input$motionX, ", ", input$motionY, ") ~ ", input$motionID, " + ", input$motionTime))
      dataAggregate = aggregate(formula, data = preprocessedData, input$motionAggregateFunction)
      gvisMotionChart(dataAggregate, idvar = input$motionID, timevar = input$motionTime, xvar = input$motionX, yvar = input$motionY, sizevar = input$motionSize,
                      options = list(height = 500))
    }
  })
  
  output$googleMapChart = renderGvis({
    # Check for strings
    if (is.character(input$mapVar) && is.character(input$mapAggregate)) {
      # Always aggregate input variable against cancer registry
      formula = as.formula(paste(input$mapVar, " ~ reg"))
      dataAggregate = aggregate(formula, preprocessedData, input$mapAggregate)
      gvisGeoMap(dataAggregate, locationvar = "reg", numvar = input$mapVar,
                 options = list(region = "US",
                                resolution ="regions",
                                height = 400,
                                width = 600))
    }
  })
  
})

### UI.R

library(shiny)
library(googleVis)

# A standard collection of menu choices for use below
standardChoices = c("Age of Diagnosis" = "agedx",
                    "Year of Birth" = "yrbrth",
                    "Sequence Number" = "seqnum",
                    "Year of Diagnosis" = "yrdx",
                    "Tumor Size" = "cssize",
                    "Survival (Months)" = "surv",
                    "Sex" = "sex",
                    "Cancer Registry" = "reg",
                    "Race" = "race",
                    "Stage" = "stage")

shinyUI(fluidPage(
  
  # Application title
  titlePanel("SEER Cancer Data"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("graphType", "Choose a graph type",
                  choices = c("Bar Graph" = "bar",
                              "Pie Graph" = "pie",
                              "Motion Bubble Chart" = "motion",
                              "Map" = "map")),
      conditionalPanel("input.graphType == 'bar'",
                       # X axis selection for bar chart. Can be any type.
                       selectInput("graphX", "Graph X Axis",
                                   choices = c("Year of Diagnosis" = "yrdx",
                                               "Age of Diagnosis" = "agedx",
                                               "Sex" = "sex",
                                               "Cancer Registry" = "reg",
                                               "Cancer Sequence Number" = "seqnum",
                                               "Race" = "race",
                                               "Stage" = "stage")),
                       # Y axis selection for bar chart. Needs to be numeric 
                       # data that makes sense (eg. no yrdx - average of years?).
                       selectInput("graphY", "Graph Y Axis",
                                   choices = c("Age of Diagnosis" = "agedx",
                                               "Tumor Size" = "cssize")),
                       # The function that will be passed in to aggregate.
                       selectInput("aggregateFunction", "Aggregate Function",
                                   choices = c("Mean" = "mean",
                                               "Count" = "length",
                                               "Standard Deviation" = "sd"))),
      conditionalPanel("input.graphType == 'pie'",
                       selectInput("pieVar", "Variable",
                                   choices = standardChoices)),
      conditionalPanel("input.graphType == 'motion'",
                       selectInput("motionID", "ID Variable",
                                   choices = standardChoices),
                       selectInput("motionSize", "Size Variable",
                                   choices = standardChoices),
                       selectInput("motionTime", "Time Variable",
                                   choices = c("Year of Diagnosis" = "yrdx",
                                               "Year of Birth" = "yrbrth")),
                       selectInput("motionX", "Graph X Axis",
                                   choices = standardChoices),
                       selectInput("motionY", "Graph Y Axis",
                                   choices = c("Age of Diagnosis" = "agedx",
                                               "Tumor Size" = "cssize")),
                       selectInput("motionAggregateFunction", "Aggregate Function",
                                   choices = c("Mean" = "mean",
                                               "Count" = "length",
                                               "Standard Deviation" = "sd"))),

      conditionalPanel("input.graphType == 'map'",
                       selectInput("mapVar", "Variable",
                                   choices = c("Age of Diagnosis" = "agedx",
                                               "Year of Birth" = "yrbrth",
                                               "Sequence Number" = "seqnum",
                                               "Year of Diagnosis" = "yrdx",
                                               "Tumor Size" = "cssize",
                                               "Survival (Months)" = "surv")),
                       selectInput("mapAggregate", "Aggregate Function",
                                   choices = c("Mean" = "mean",
                                               "Count" = "length",
                                               "Standard Deviation" = "sd")))
    ),

    mainPanel(
      # Google Vis bar chart.
      conditionalPanel("input.graphType == 'bar'",
                       htmlOutput("googleBarChart")),
      conditionalPanel("input.graphType == 'pie'",
                       htmlOutput("googlePieChart")),
      conditionalPanel("input.graphType == 'motion'",
                       htmlOutput("googleMotionChart")),
      conditionalPanel("input.graphType == 'map'",
                       htmlOutput("googleMapChart")),
      width = 8
    )
  )
))
